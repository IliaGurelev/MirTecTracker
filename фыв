<template>
	<nav :class="['sidebar', 'dashboards-sidebar', { close: isSidebarClosed }]">
	  <div class="sidebar-header">
		<li class="item">
		  <button @click="toggleAddDashboardModal" class="nav_link submenu_item">
			<span class="nav_link_icon">
			  <i :class="isAddDashboardModalOpen ? 'fas fa-times' : 'fas fa-plus'" class="icon-animation"></i>
			</span>
			<span class="navlink">{{ isAddDashboardModalOpen ? 'Скрыть форму' : 'Добавить дашборд' }}</span>
		  </button>
		</li>
		<button @click="toggleSidebar" class="close-sidebar-btn">
		  <i class="fas fa-times"></i>
		</button>
	  </div>
	  <data class="dashboards__togglebutton">
		<AddDashboardModal v-if="isAddDashboardModalOpen" @close="closeAddDashboardModal" />
		<AddInviteDashboard />
	  </data>
	  <div class="menu_content">
		<ul class="menu_items">
		  <transition-group name="dashboard-list" tag="div">
			<li class="item" v-for="dashboard in dashboards" :key="dashboard.id">
			  <router-link :to="{ name: 'Dashboard', query: { id: dashboard.id } }" tag="div">
				<div class="nav_link submenu_item">
				  <span class="nav_link_icon">
					<div class="squares" :style="{ color: dashboard.color }">
					  <div class="square">
						<i class="fas fa-square icon top-left"></i>
						<i class="fas fa-square icon top-right"></i>
						<i class="fas fa-square icon bottom-left"></i>
						<i class="fas fa-square icon bottom-right"></i>
					  </div>
					</div>
				  </span>
				  <span class="nav_link_text">{{ truncateText(dashboard.name) }}</span>
				  <span class="nav_link_icon" @mouseover="startShake" @mouseleave="stopShake">
					<i class="fas fa-trash-alt icon-trash" @click.prevent="showDeleteModal(dashboard.id)"></i>
				  </span>
				</div>
			  </router-link>
			</li>
		  </transition-group>
		</ul>
	  </div>
	</nav>
	<Modal :visible="modalVisible" @confirm="handleDelete" @cancel="cancelDelete">
	</Modal>
  </template>
  
  <script setup>
  import { useMainStore } from '@/store';
  import { ref, onMounted } from 'vue';
  import { storeToRefs } from 'pinia';
  import AddDashboardModal from '@/components/AddDashboard/AddDashboard.vue';
  import AddInviteDashboard from '@/components/AddDashboard/AddInviteCode.vue';
  import Modal from '@/components/ConfirmationModal/ConfirmationModal.vue';
  
  const store = useMainStore();
  const { dashboards } = storeToRefs(store);
  
  const isAddDashboardModalOpen = ref(false);
  const isSidebarClosed = ref(false);
  const modalVisible = ref(false);
  const dashboardToDeleteId = ref(null);
  
  const toggleAddDashboardModal = () => {
	isAddDashboardModalOpen.value = !isAddDashboardModalOpen.value;
  };
  
  const closeAddDashboardModal = () => {
	isAddDashboardModalOpen.value = false;
  };
  
  const toggleSidebar = () => {
	isSidebarClosed.value = !isSidebarClosed.value;
  };
  
  const truncateText = (text, maxLength = 11) => {
	if (text.length <= maxLength) return text;
	return text.slice(0, maxLength) + '...';
  };
  
  onMounted(() => {
	store.fetchDashboards();
  });
  
  const showDeleteModal = (dashboardId) => {
	dashboardToDeleteId.value = dashboardId;
	modalVisible.value = true;
  };
  
  const handleDelete = () => {
  console.log(`Deleting dashboard with ID ${dashboardToDeleteId.value}`);
  modalVisible.value = false; 
  dashboardToDeleteId.value = null; 
};
  
  const cancelDelete = () => {
	modalVisible.value = false;
  };
  
 
  const isShaking = ref(false);
  
  const startShake = () => {
	isShaking.value = true;
  };
  
  const stopShake = () => {
	isShaking.value = false;
  };
  </script>
  
  <style scoped>
  .dashboards__togglebutton {
	text-align: center;
  }
  .navlink {
	margin-left: 10px;
  }
  .nav_link {
	display: flex;
	align-items: center;
	padding: 10px;
	border-radius: 4px;
	color: #333;
	text-decoration: none;
	transition: background-color 0.2s ease;
  }
  
  .nav_link_icon {
	position: relative;
	margin-left: 10px; /* Adjust spacing as needed */
  }
  
  .nav_link_icon:hover .icon-trash {
	animation: shake 0.5s infinite; /* Apply shake animation on hover */
  }
  
  @keyframes shake {
	0% { transform: translateX(0); }
	10% { transform: translateX(1px); }
	20% { transform: translateX(-1px); }
	30% { transform: translateX(1px); }
	40% { transform: translateX(-1px); }
	50% { transform: translateX(1px); }
	60% { transform: translateX(-1px); }
	70% { transform: translateX(1px); }
	80% { transform: translateX(-1px); }
	90% { transform: translateX(1px); }
	100% { transform: translateX(0); }
  }
  
  .icon-trash {
	font-size: 18px;
	color: red; /* Change color as needed */
	cursor: pointer;
	transition: transform 0.3s ease; /* Smooth transition for shake effect */
  }
  
  .squares {
	width: 35px;
	height: 40px;
	margin-right: 10px; /* Adjust spacing as needed */
  }
  
  .square {
	position: relative;
	width: 20px;
	border-radius: 10px;
	top: 1.2rem;
	left: 0.5rem;
  }
  
  .icon {
	position: absolute;
	font-size: 10px;
  }
  
  .top-left {
	top: 0;
	left: 0;
  }
  
  .top-right {
	top: 0;
	right: 0;
  }
  
  .bottom-left {
	bottom: 0;
	left: 0;
  }
  
  .bottom-right {
	bottom: 0;
	right: 0;
  }
  
  .menu_items {
	list-style-type: none;
	padding: 0;
  }
  
  .item {
	margin-bottom: 10px;
	transition: opacity 0.3s ease;
  }
  
  .nav_link:hover {
	background-color: #e7e7e7;
  }
  
  .item:hover {
	border-radius: 8px;
	opacity: 0.9;
	background-color: #e7e7e7;
  }
  
  .sidebar.dashboards-sidebar {
	position: fixed;
	top: 0;
	left: 70px; /* Adjusted left position to fit your design */
	width: 260px;
	height: 100%;
	background-color: var(--bg);
	box-shadow: 0 0 1px rgba(0, 0, 0, 0.1);
	transition: all 0.3s ease;
	z-index: 50;
	transform: translateX(0);
  }
  
  .sidebar.dashboards-sidebar.close {
	transform: translateX(-260px);
  }
  
  .sidebar-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 10px;
  }
  
  .close-sidebar-btn {
	background: none;
	border: none;
	font-size: 20px;
	cursor: pointer;
  }
  
  @media screen and (max-width: 800px) {
	.sidebar.dashboards-sidebar {
	  left: 0px;
	}
  }
  
  .dashboard-list-enter-active,
  .dashboard-list-leave-active {
	transition: opacity 0.5s;
  }
  
  .dashboard-list-enter-from,
  .dashboard-list-leave-to {
	opacity: 0;
  }
  </style>
  